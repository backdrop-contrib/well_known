<?php

/**
 * @file
 * Tests for the well_known_uris module.
 */

/**
 * Base test case class.
 *
 * @ingroup well_known_uris
 */
class WellKnownUrisBaseWebTestCase extends BackdropWebTestCase {
  const CHANGE_PASSWORD_URL = '.well-known/change-password';
  const CHANGE_PASSWORD_ADMIN_URL = 'admin/config/system/well-known-uris/change-password';

  protected $authenticatedUser;
  protected $administratorUser;
}

/**
 * Test case with the well_known_uris module disabled.
 *
 * @ingroup well_known_uris
 */
class WellKnownUrisModuleDisabled extends WellKnownUrisBaseWebTestCase {
  /**
   * Enable modules and create users with specific permissions.
   */
  public function setUp() {
    // Add modules not enabled in a standard (not minimal) backdrop install.
    parent::setUp();

    // Create users.
    $this->authenticatedUser = $this->backdropCreateUser();
    $this->administratorUser = $this->backdropCreateUser(array('administer site configuration'));
  }

  /**
   * Test page access for various users.
   */
  public function testPageAccess() {
    // Anonymous user page access.
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(404);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);

    // Authenticated user page access.
    $this->backdropLogin($this->authenticatedUser);
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(404);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);
    $this->backdropLogout();

    // Administrator user page access.
    $this->backdropLogin($this->administratorUser);
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(404);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);
    $this->backdropLogout();
  }
}

/**
 * Test case with the well_known_uris module disabled.
 *
 * @ingroup well_known_uris
 */
class WellKnownUrisChangePassword extends WellKnownUrisBaseWebTestCase {
  /**
   * Enable modules and create users with specific permissions.
   */
  public function setUp() {
    // Add modules not enabled in a standard (not minimal) backdrop install.
    parent::setUp('well_known_uris');

    // Create users.
    $this->authenticatedUser = $this->backdropCreateUser();
    $this->administratorUser = $this->backdropCreateUser(array('administer site configuration'));
  }

  /**
   * Submit the change-password service administraiton form.
   *
   * @param bool changePasswordServiceStatus
   *   TRUE to enable the change-password service, FALSE otherwise.
   */
  private function submitAdminForm($changePasswordServiceStatus) {
    // Log in as an administrator and submit the admin form
    $this->backdropLogin($this->administratorUser);
    $edit = array();
    $edit['enabled'] = $changePasswordServiceStatus;
    $this->backdropPost(
      self::CHANGE_PASSWORD_ADMIN_URL,
      $edit,
      t('Save configuration')
    );
    $this->assertResponse(200);
    $this->backdropLogout();
  }

  /**
   * Check the change-password service administraiton form.
   *
   * @param bool expectedChangePasswordServiceStatus
   *   TRUE to check the change-password service is enabled, FALSE checks it is disabled.
   */
  private function checkAdminForm($expectedChangePasswordServiceStatus) {
    // Log in as an administrator and check the admin form checkbox is as expected
    $this->backdropLogin($this->administratorUser);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(200);

    if ($expectedChangePasswordServiceStatus) {
      $this->assertFieldChecked('edit-enabled', 'Change password service enabled as expected.');
    }
    else {
      $this->assertNoFieldChecked('edit-enabled', 'Change password service disabled as expected.');
    }

    $this->backdropLogout();
  }

  /**
   * Test the change-password administration form.
   */
  public function testAdminForm() {
    $this->checkAdminForm(FALSE);
    $this->submitAdminForm(TRUE);
    $this->checkAdminForm(TRUE);
  }

  /**
   * Test page access with change-password service disabled.
   */
  public function testPageAccessServiceDisabled() {
    // Ensure the change-password service is disabled
    $this->submitAdminForm(FALSE);

    // Anonymous user page access.
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(403);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);

    // Authenticated user page access.
    $this->backdropLogin($this->authenticatedUser);
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(403);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);
    $this->backdropLogout();

    // Administrator user page access.
    $this->backdropLogin($this->administratorUser);
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(403);
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(200);
    $this->backdropLogout();
  }

  /**
   * Test page access with change-password service enabled.
   */
  public function testPageAccessServiceEnabled() {
    // Ensure the change-password service is enabled
    $this->submitAdminForm(TRUE);

    // Anonymous user page access.
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(200);
    $this->assertTitle('Reset password | Backdrop CMS');
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);

    // Authenticated user page access.
    $this->backdropLogin($this->authenticatedUser);
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(200);
    $this->assertUrl('user/' . $this->authenticatedUser->uid . '/edit');
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(403);
    $this->backdropLogout();

    // Administrator user page access.
    $this->backdropLogin($this->administratorUser);
    $this->backdropGet(self::CHANGE_PASSWORD_URL);
    $this->assertResponse(200);
    $this->assertUrl('user/' . $this->administratorUser->uid . '/edit');
    $this->backdropGet(self::CHANGE_PASSWORD_ADMIN_URL);
    $this->assertResponse(200);
    $this->backdropLogout();
  }
}
